-- ==========================================================
-- Projet 4 : Gestion de Centre de Fitness - Vitality Club
-- Phase 3 : queries.sql (DQL - Data Query Language)

-- 1Ô∏è‚É£ Requ√™te 1 :
-- Lister tous les membres inscrits apr√®s le 1er Janvier 2024,
-- tri√©s par date d'inscription croissante.
-- ==========================================================
SELECT id_membre, nom_membre, email_membre, date_naissance, date_inscription
FROM Membres WHERE date_inscription > '2024-01-01'
ORDER BY date_inscription ASC;
-- ‚úÖ Explication
-- SELECT : extrait les informations principales des membres.
-- WHERE date_inscription > '2024-01-01' : filtre uniquement les membres inscrits apr√®s le 1er janvier 2024.
-- ORDER BY date_inscription ASC : trie les r√©sultats du plus ancien au plus r√©cent.



-- ==========================================================
-- 2Ô∏è‚É£ Requ√™te 2 :
-- Trouver les informations d'un membre par son adresse email.
-- Exemple : rechercher le membre ayant l'adresse 'membre10@email.com'
-- ==========================================================
SELECT id_membre, nom_membre, email_membre, date_naissance, date_inscription
FROM Membres WHERE email_membre = 'membre10@email.com';
-- üí° Explication
-- Cette requ√™te s√©lectionne toutes les informations pertinentes d‚Äôun membre.
-- Le crit√®re de recherche est l‚Äôadresse email, suppos√©e unique (comme d√©fini dans le sch√©ma de ta table Membres).
-- Tu peux bien s√ªr remplacer 'membre10@email.com' par n‚Äôimporte quelle autre adresse email lors de l‚Äôex√©cution.



-- ==========================================================
-- 3Ô∏è‚É£ Requ√™te 3 :
-- Lister tous les cours collectifs en affichant le nom du cours
-- et le nom de son coach principal.
-- ==========================================================
SELECT Cours_Collectifs.id_cours, Cours_Collectifs.nom_cours, coachs.nom_coach AS coach_principal
FROM Cours_Collectifs JOIN Coachs ON Cours_Collectifs.id_coach_principal = Coachs.id_coach
ORDER BY Cours_Collectifs.nom_cours ASC;

-- üí° Explication
-- JOIN Coachs co ON Cours_Collectifs.id_coach_principal = Coachs.id_coach : relie chaque cours collectif √† son coach principal.
-- AS coach_principal : permet d‚Äôafficher une colonne claire dans le r√©sultat.
-- ORDER BY Cours_Collectifs.nom_cours ASC : trie la liste des cours par ordre alphab√©tique.



-- ==========================================================
-- 4Ô∏è‚É£ Requ√™te 4 :
-- Lister tous les membres inscrits au cours de 'Yoga' du Lundi.
-- ==========================================================
SELECT Membres.id_membre, Membres.nom_membre, Membres.email_membre,
    Cours_Collectifs.nom_cours, Cours_Collectifs.jour_semaine
FROM Membres 
JOIN Reservations_Cours ON Membres.id_membre = Reservations_Cours.id_membre
JOIN Cours_Collectifs ON Reservations_Cours.id_cours = Cours_Collectifs.id_cours
WHERE Cours_Collectifs.nom_cours = 'Yoga Matinal' AND Cours_Collectifs.jour_semaine = 'Lundi'
ORDER BY Membres.nom_membre ASC;
-- üí° Explication
-- JOIN Reservations_Cours ‚Üí relie chaque membre √† ses r√©servations de cours.
-- JOIN Cours_Collectifs ‚Üí permet d‚Äôacc√©der au nom et jour du cours.
-- WHERE Cours_Collectifs.nom_cours = 'Yoga' AND Cours_Collectifs.jour_semaine = 'Lundi' ‚Üí filtre uniquement les cours de Yoga le Lundi.
-- ORDER BY Membres.nom_membre ASC ‚Üí trie les membres par ordre alphab√©tique.



-- ==========================================================
-- 5Ô∏è‚É£ Requ√™te 5 :
-- Afficher l'historique complet des paiements d'un membre sp√©cifique,
-- en montrant son nom, le nom de l'abonnement pay√©, le montant et la date du paiement.
-- Exemple : membre avec l'ID 10
-- ==========================================================
SELECT Membres.nom_membre, Abonnements.nom_abonnement,
    Paiements_Abonnements.montant_paye, Paiements_Abonnements.date_paiement
FROM Paiements_Abonnements
JOIN Membres ON Paiements_Abonnements.id_membre = Membres.id_membre
JOIN Abonnements ON Paiements_Abonnements.id_abonnement = Abonnements.id_abonnement
WHERE Membres.id_membre = 10 
ORDER BY Paiements_Abonnements.date_paiement ASC;
-- üí° Explication
-- JOIN Membres ‚Üí r√©cup√®re le nom du membre correspondant au paiement.
-- JOIN Abonnements ‚Üí r√©cup√®re le nom de l‚Äôabonnement pay√©.
-- WHERE Membres.id_membre = 10 ‚Üí filtre sur le membre sp√©cifique.
-- ORDER BY Paiements_Abonnements.date_paiement ASC ‚Üí affiche les paiements du plus ancien au plus r√©cent.



-- ==========================================================
-- 6Ô∏è‚É£ Requ√™te 6 :
-- Identifier les membres qui n'ont jamais r√©serv√© de cours collectif.
-- ==========================================================
SELECT Membres.id_membre, Membres.nom_membre, Membres.email_membre,
Membres.date_inscription
FROM Membres
LEFT JOIN Reservations_Cours ON Membres.id_membre = Reservations_Cours.id_membre
WHERE Reservations_Cours.id_reservation IS NULL
ORDER BY Membres.nom_membre ASC;
-- üí° Explication
-- LEFT JOIN Reservations_Cours ‚Üí garde tous les membres, m√™me s‚Äôils n‚Äôont pas de r√©servation.
-- WHERE Reservations_Cours.id_reservation IS NULL ‚Üí filtre uniquement les membres sans aucune r√©servation.
-- ORDER BY Membres.nom_membre ASC ‚Üí trie la liste par ordre alphab√©tique.



-- ==========================================================
-- 7Ô∏è‚É£ Requ√™te 7 :
-- Identifier les abonnements qui n'ont jamais √©t√© souscrits.
-- ==========================================================
SELECT Abonnements.id_abonnement, Abonnements.nom_abonnement,
       Abonnements.prix_mensuel, Abonnements.duree_mois
FROM Abonnements
LEFT JOIN Paiements_Abonnements ON Abonnements.id_abonnement = Paiements_Abonnements.id_abonnement
WHERE Paiements_Abonnements.id_paiement IS NULL
ORDER BY Abonnements.nom_abonnement ASC;
-- üí° Explication
-- LEFT JOIN Paiements_Abonnements ‚Üí garde tous les abonnements, m√™me ceux qui n‚Äôont aucun paiement associ√©.
-- WHERE Paiements_Abonnements.id_paiement IS NULL ‚Üí filtre uniquement les abonnements jamais souscrits.
-- ORDER BY Abonnements.nom_abonnement ASC ‚Üí trie la liste par ordre alphab√©tique.



-- ==========================================================
-- 8Ô∏è‚É£ Requ√™te 8 :
-- Compter le nombre de cours que chaque coach enseigne.
-- ==========================================================
SELECT Coachs.id_coach, Coachs.nom_coach,
       COUNT(Cours_Collectifs.id_cours) AS nombre_cours
FROM Coachs
LEFT JOIN Cours_Collectifs ON Coachs.id_coach = Cours_Collectifs.id_coach_principal
GROUP BY Coachs.id_coach, Coachs.nom_coach
ORDER BY nombre_cours DESC;
-- üí° Explication
-- LEFT JOIN Cours_Collectifs ‚Üí permet d‚Äôinclure tous les coachs, m√™me ceux qui n‚Äôenseignent aucun cours.
-- COUNT(Cours_Collectifs.id_cours) ‚Üí compte le nombre de cours pour chaque coach.
-- GROUP BY Coachs.id_coach, Coachs.nom_coach ‚Üí regroupe les r√©sultats par coach.
-- ORDER BY nombre_cours DESC ‚Üí affiche les coachs les plus occup√©s en premier.



    -- ==========================================================
-- 9Ô∏è‚É£ Requ√™te 9 :
-- Calculer le nombre moyen de r√©servations de cours par membre.
-- ==========================================================
SELECT AVG(nombre_reservations) AS moyenne_reservations_par_membre
FROM (SELECT Membres.id_membre,
    COUNT(Reservations_Cours.id_reservation) AS nombre_reservations
    FROM Membres
    LEFT JOIN Reservations_Cours ON Membres.id_membre = Reservations_Cours.id_membre
    GROUP BY Membres.id_membre ) AS sous_requete;
-- üí° Explication
-- La sous-requ√™te :
-- LEFT JOIN Reservations_Cours ‚Üí inclut tous les membres, m√™me ceux qui n‚Äôont aucune r√©servation.
-- COUNT(Reservations_Cours.id_reservation) ‚Üí compte le nombre de r√©servations pour chaque membre.
-- GROUP BY Membres.id_membre ‚Üí calcule le total par membre.
-- La requ√™te principale :
-- AVG(nombre_reservations) ‚Üí calcule la moyenne des r√©servations sur tous les membres.



-- ==========================================================
-- 10Ô∏è‚É£ Requ√™te 10 :
-- Lister les cours collectifs qui ont plus de 15 r√©servations.
-- ==========================================================
SELECT Cours_Collectifs.id_cours, Cours_Collectifs.nom_cours,
    Cours_Collectifs.jour_semaine, Cours_Collectifs.heure_debut,
    COUNT(Reservations_Cours.id_reservation) AS nombre_reservations
FROM Cours_Collectifs
LEFT JOIN Reservations_Cours ON Cours_Collectifs.id_cours = Reservations_Cours.id_cours
GROUP BY Cours_Collectifs.id_cours, Cours_Collectifs.nom_cours, Cours_Collectifs.jour_semaine, Cours_Collectifs.heure_debut
HAVING COUNT(Reservations_Cours.id_reservation) > 15
ORDER BY nombre_reservations DESC;
-- Explication
-- LEFT JOIN Reservations_Cours ‚Üí relie chaque cours √† ses r√©servations, tout en incluant les cours qui peuvent avoir 0 r√©servation.
-- COUNT(Reservations_Cours.id_reservation) ‚Üí calcule le nombre total de r√©servations par cours.
-- GROUP BY ‚Üí regroupe les r√©sultats par cours pour appliquer le COUNT.
-- HAVING COUNT(...) > 15 ‚Üí filtre uniquement les cours avec plus de 15 r√©servations.
-- ORDER BY nombre_reservations DESC ‚Üí affiche les cours les plus populaires en premier.



-- ==========================================================
-- 11Ô∏è‚É£ Requ√™te 11 :
-- Calculer le chiffre d'affaires total g√©n√©r√© par chaque type d'abonnement.
-- ==========================================================
SELECT Abonnements.id_abonnement, Abonnements.nom_abonnement,
       SUM(Paiements_Abonnements.montant_paye) AS chiffre_affaires_total
FROM Abonnements
LEFT JOIN Paiements_Abonnements ON Abonnements.id_abonnement = Paiements_Abonnements.id_abonnement
GROUP BY Abonnements.id_abonnement, Abonnements.nom_abonnement
ORDER BY chiffre_affaires_total DESC;
-- üí° Explication
-- LEFT JOIN Paiements_Abonnements ‚Üí relie chaque abonnement √† ses paiements, tout en incluant les abonnements qui n‚Äôont jamais √©t√© souscrits.
-- SUM(Paiements_Abonnements.montant_paye) ‚Üí calcule le total des paiements pour chaque type d‚Äôabonnement.
-- GROUP BY Abonnements.id_abonnement, Abonnements.nom_abonnement ‚Üí regroupe les r√©sultats par type d‚Äôabonnement.
-- ORDER BY chiffre_affaires_total DESC ‚Üí affiche en premier les abonnements qui ont g√©n√©r√© le plus de revenus.



-- ==========================================================
-- 12Ô∏è‚É£ Requ√™te 12 :
-- Trouver les 5 membres les plus actifs du mois en cours
-- (bas√© sur le nombre de r√©servations de cours).
-- ==========================================================
SELECT Membres.id_membre, Membres.nom_membre, Membres.email_membre,
    COUNT(Reservations_Cours.id_reservation) AS nombre_reservations
FROM Membres
JOIN Reservations_Cours ON Membres.id_membre = Reservations_Cours.id_membre
WHERE MONTH(Reservations_Cours.date_reservation) = MONTH(CURDATE())
AND YEAR(Reservations_Cours.date_reservation) = YEAR(CURDATE())
GROUP BY Membres.id_membre, Membres.nom_membre, Membres.email_membre
ORDER BY nombre_reservations DESC LIMIT 5;
-- üí° Explication
-- JOIN Reservations_Cours ‚Üí relie chaque membre √† ses r√©servations.
-- WHERE MONTH(...) = MONTH(CURDATE()) AND YEAR(...) = YEAR(CURDATE()) ‚Üí filtre les r√©servations du mois en cours.
-- COUNT(Reservations_Cours.id_reservation) ‚Üí calcule le nombre de r√©servations par membre.
-- GROUP BY Membres.id_membre, Membres.nom_membre, Membres.email_membre ‚Üí regroupe les r√©sultats par membre.
-- ORDER BY nombre_reservations DESC LIMIT 5 ‚Üí r√©cup√®re les 5 membres ayant le plus de r√©servations ce mois-ci.